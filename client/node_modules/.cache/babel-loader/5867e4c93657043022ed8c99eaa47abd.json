{"ast":null,"code":"import _regeneratorRuntime from\"/Users/dmitrii/Desktop/Projects/crwn-clothing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _objectSpread from\"/Users/dmitrii/Desktop/Projects/crwn-clothing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _asyncToGenerator from\"/Users/dmitrii/Desktop/Projects/crwn-clothing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import firebase from'firebase/app';import'firebase/firestore';import'firebase/auth';var config={apiKey:'AIzaSyAAlAn-H2Jxz7BgXLYPu4X7UzHuDMFcJuM',authDomain:'crwn-db-b40f0.firebaseapp.com',databaseURL:'https://crwn-db-b40f0.firebaseio.com',projectId:'crwn-db-b40f0',storageBucket:'crwn-db-b40f0.appspot.com',messagingSenderId:'26314677744',appId:'1:26314677744:web:87a96effc7a0bfd94c1135',measurementId:'G-VM9V3LJ8JP'};export var createUserProfileDocument=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(userAuth,additionalData){var userRef,snapShot,displayName,email,createdAt;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(userAuth){_context.next=2;break;}return _context.abrupt(\"return\");case 2:userRef=firestore.doc(\"users/\".concat(userAuth.uid));_context.next=5;return userRef.get();case 5:snapShot=_context.sent;if(snapShot.exists){_context.next=17;break;}displayName=userAuth.displayName,email=userAuth.email;createdAt=new Date();_context.prev=9;_context.next=12;return userRef.set(_objectSpread({displayName:displayName,email:email,createdAt:createdAt},additionalData));case 12:_context.next=17;break;case 14:_context.prev=14;_context.t0=_context[\"catch\"](9);console.log('error creating user',_context.t0.message);case 17:return _context.abrupt(\"return\",userRef);case 18:case\"end\":return _context.stop();}}},_callee,null,[[9,14]]);}));return function createUserProfileDocument(_x,_x2){return _ref.apply(this,arguments);};}();export var addCollectionAndDocuments=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(collectionKey,objectsToAdd){var collectionRef,batch;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:collectionRef=firestore.collection(collectionKey);batch=firestore.batch();objectsToAdd.forEach(function(obj){var newDocRef=collectionRef.doc();batch.set(newDocRef,obj);});_context2.next=5;return batch.commit();case 5:return _context2.abrupt(\"return\",_context2.sent);case 6:case\"end\":return _context2.stop();}}},_callee2);}));return function addCollectionAndDocuments(_x3,_x4){return _ref2.apply(this,arguments);};}();export var convertCollectionsSnapshotToMap=function convertCollectionsSnapshotToMap(collections){var transformedCollection=collections.docs.map(function(doc){var _doc$data=doc.data(),title=_doc$data.title,items=_doc$data.items;return{routeName:encodeURI(title.toLowerCase()),id:doc.id,title:title,items:items};});return transformedCollection.reduce(function(accumulator,collection){accumulator[collection.title.toLowerCase()]=collection;return accumulator;},{});};firebase.initializeApp(config);export var auth=firebase.auth();export var firestore=firebase.firestore();var provider=new firebase.auth.GoogleAuthProvider();provider.setCustomParameters({prompt:'select_account'});export var signInWithGoogle=function signInWithGoogle(){return auth.signInWithPopup(provider);};export default firebase;","map":{"version":3,"sources":["/Users/dmitrii/Desktop/Projects/crwn-clothing/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","get","snapShot","exists","displayName","email","createdAt","Date","set","console","log","message","addCollectionAndDocuments","collectionKey","objectsToAdd","collectionRef","collection","batch","forEach","obj","newDocRef","commit","convertCollectionsSnapshotToMap","collections","transformedCollection","docs","map","data","title","items","routeName","encodeURI","toLowerCase","id","reduce","accumulator","initializeApp","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\nconst config = {\n\tapiKey: 'AIzaSyAAlAn-H2Jxz7BgXLYPu4X7UzHuDMFcJuM',\n\tauthDomain: 'crwn-db-b40f0.firebaseapp.com',\n\tdatabaseURL: 'https://crwn-db-b40f0.firebaseio.com',\n\tprojectId: 'crwn-db-b40f0',\n\tstorageBucket: 'crwn-db-b40f0.appspot.com',\n\tmessagingSenderId: '26314677744',\n\tappId: '1:26314677744:web:87a96effc7a0bfd94c1135',\n\tmeasurementId: 'G-VM9V3LJ8JP'\n};\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n\tif (!userAuth) return;\n\n\tconst userRef = firestore.doc(`users/${userAuth.uid}`);\n\tconst snapShot = await userRef.get();\n\n\tif (!snapShot.exists) {\n\t\tconst { displayName, email } = userAuth;\n\t\tconst createdAt = new Date();\n\n\t\ttry {\n\t\t\tawait userRef.set({ displayName, email, createdAt, ...additionalData });\n\t\t} catch (error) {\n\t\t\tconsole.log('error creating user', error.message);\n\t\t}\n\t}\n\treturn userRef;\n};\n\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n\tconst collectionRef = firestore.collection(collectionKey);\n\n\tconst batch = firestore.batch();\n\tobjectsToAdd.forEach((obj) => {\n\t\tconst newDocRef = collectionRef.doc();\n\t\tbatch.set(newDocRef, obj);\n\t});\n\treturn await batch.commit();\n};\n\nexport const convertCollectionsSnapshotToMap = (collections) => {\n\tconst transformedCollection = collections.docs.map((doc) => {\n\t\tconst { title, items } = doc.data();\n\n\t\treturn {\n\t\t\trouteName: encodeURI(title.toLowerCase()),\n\t\t\tid: doc.id,\n\t\t\ttitle,\n\t\t\titems\n\t\t};\n\t});\n\treturn transformedCollection.reduce((accumulator, collection) => {\n\t\taccumulator[collection.title.toLowerCase()] = collection;\n\t\treturn accumulator;\n\t}, {});\n};\n\nfirebase.initializeApp(config);\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({ prompt: 'select_account' });\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\n\nexport default firebase;\n"]},"metadata":{},"sourceType":"module"}